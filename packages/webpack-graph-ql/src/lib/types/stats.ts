import { AutoSchema } from "./auto-schema";
import { Asset, AssetData, AssetsByChunkName } from './asset';
import { Chunk, ChunkData } from './chunk';
import { Module, ModuleData } from './module';
import { WebpackModuleError, ErrorData } from './error';
import { Warning, WarningData } from './warning';

export type StatsData = {
  version: string;
  hash: string;
  time: number;
  publicPath: string;
  outputPath: string;
  assetsByChunkName: AssetsByChunkName;
  assets: AssetData[];
  chunks: ChunkData[];
  modules: ModuleData[];
  entryPoints: EntryPointData[];
  errors: ErrorData[];
  errorsCount: number;
  warnings: WarningData[];
  warningsCount: number;
}

/**
 * The `Stats` class represents a GraphQL schema for retrieving statistics
 * about a webpack build. It has the following properties:
 * 
 * - `assets`: an array of `Asset` objects representing the assets generated
 *   by the webpack build
 * - `chunks`: an array of `Chunk` objects representing the chunks generated
 *   by the webpack build
 * - `modules`: an array of `Module` objects representing the modules
 *   included in the webpack build
 * - `errors`: an array of `WebpackModuleError` objects representing the
 *   errors that occurred during the webpack build
 * - `warnings`: an array of `Warning` objects representing the warnings
 *   generated during the webpack build
 * - `hash`: a string representing the hash of the webpack build
 * - `version`: a string representing the version of webpack used to create
 *   the build
 * - `time`: a string representing the time it took to complete the webpack
 *   build
 */
export class Stats extends AutoSchema {

  private assetsData: AssetData[];
  private assetsByChunkName: Map<string, string | string[]>
  private chunksData: ChunkData[];
  private modulesData: ModuleData[];
  private errorsData: ErrorsData[];
  private warningsData: WarningData[];

  @returns(String) version: string;
  @returns(String) hash: string;
  @returns("Int") time: number;
  @returns(String) publicPath: string;
  @returns(String) outputPath: string;
  @returns("Int") errorsCount: number;
  @returns("Int") warningsCount: number;

  @returns([Asset])
  get assets(): Asset[] {
    return this.assetsData.map(Asset.from);
  }

  @returns([Chunk])
  get chunks(): Chunk[] {
    return this.chunksData.map((chunkData) => Chunk.from({
      assets: this.assetsByChunkName[chunkData.names]
      ...chunkData
    }));
  }

  @returns([Module])
  get modules(): Module[] {
    return this.modulesData.map(Module.from);
  }

  @returns([WebpackModuleError])
  get errors(): WebpackModuleError[] {
    return this.errorsData.map(WebpackModuleError.from());
  }
  
  @returns([Warning])
  get warnings(): Warning[] {
    return this.warningsData.map(Warning.from);
  }

  /**
   * The `getStats` method is the root query resolver for the `Stats` GraphQL
   * schema.
   * It retrieves the statistics about a webpack build from a stats file and
   * returns a `Stats` object.
   *
   * @param parent - the parent value for the current field (undefined for a
   * root query resolver)
   * @param args - an object containing the arguments passed to the query
   * (empty in this case)
   * @param context - an object shared across all resolvers in a GraphQL
   * request, containing information such as the request context and
   * authentication credentials
   * @returns a `Stats` object containing the statistics about the webpack
   * build
   */
  @query
  @returns(Stats)
  static getStats(parent:any, args:any, context:any) {
    return this.fromFile(return JSON.parse(stats);
  }

  /**
   * The `fromFile` static method creates a new `Stats` object by parsing the
   * given file and returning its contents as a `Stats` object.
   *
   * TODO: Make this async.
   *
   * @param fileName - the name of the file to parse
   * @returns a new `Stats` object containing the contents of the file
   */
  static fromFile(fileName: string) {
    return this.from(JSON.parse(fs.readFileSync(fileName, 'utf-8')));
  }

  static from(statsData: StatsData) {
    return new this(statsData);
  }

  /**
   * The `Stats` class constructor initializes a new `Stats` object with the
   * given statistics about a webpack build.
   *
   * TODO: Drop `console.log`.
   *
   * @param statsData - an object containing the statistics about the
   * webpack build, with the following properties:
   *   - `assets`: an array of `Asset` objects representing the assets 
   *     generated by the webpack build
   *   - `chunks`: an array of `Chunk` objects representing the chunks
   *     generated by the webpack build
   *   - `modules`: an array of `Module` objects representing the modules 
   *     included in the webpack build
   *   - `errors`: an array of `WebpackModuleError` objects representing the
   *     errors that occurred during the webpack build
   *   - `warnings`: an array of `Warning` objects representing the warnings 
   *     generated during the webpack build
   *   - `hash`: a string representing the hash of the webpack build
   *   - `version`: a string representing the version of webpack used to 
   *     create the build
   *   - `time`: a string representing the time it took to complete the
   *     webpack build
   */
  constructor(statsData: StatsData) {
    console.log(statsObject);
    Object.assign(this, statsObject)
  }

};
